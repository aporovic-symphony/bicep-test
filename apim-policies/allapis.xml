<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>https://novapp-web-main.azurewebsites.net</origin>
                <origin>https://novapp-web-develop.azurewebsites.net</origin>
                <origin>https://novapp-web-sean.azurewebsites.net</origin>
                <origin>https://novapp-web-hank.azurewebsites.net</origin>
                <origin>http://localhost:3000</origin>
                <origin>http://localhost:3001</origin>
                <origin>http://localhost:3002</origin>
            </allowed-origins>
            <allowed-methods>
                <method>*</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        <choose>
            <when condition="@{return !string.IsNullOrEmpty(context.Request.Headers.GetValueOrDefault("X-Auth-Token", ""));}">
                <set-header name="WorkplaceId" exists-action="override">
                    <value>@(context.Request.Headers.GetValueOrDefault("X-Auth-Token","").AsJwt().Claims.GetValueOrDefault("workplaceId", ""))</value>
                </set-header>
            </when>
        </choose>
        <!-- Tenant ID is not set check domain service -->
        <choose>
            <when condition="@(!context.Request.Headers.ContainsKey("TenantId"))">
                <send-request mode="new" response-variable-name="domainInfo" timeout="20" ignore-error="true">
                    <set-url>https://funapp-dev-igloonovus-app-domain-service.azurewebsites.net/api/domains?code=oYODnLFS0tYHUfvPJuaMRbmfY-EYKksT8wq0Q7-X5nOtAzFuSDZdWA==</set-url>
                    <set-method>GET</set-method>
                    <set-header name="Domain" exists-action="override">
                        <value>@(context.Request.Headers.GetValueOrDefault("x-workplacedomain", "novapp-web-develop.azurewebsites.net"))</value>
                    </set-header>
                </send-request>
                <choose>
                    <when condition="@(((IResponse)context.Variables["domainInfo"]).StatusCode == 200)">
                        <set-variable name="domainInfo" value="@(((IResponse)context.Variables["domainInfo"]).Body.As<JObject>())" />
                        <set-header name="WorkplaceId" exists-action="override">
                            <value>@(((JObject)context.Variables["domainInfo"]).SelectToken("data.workplaceId").ToString())</value>
                        </set-header>
                        <set-header name="TenantId" exists-action="override">
                            <value>@(((JObject)context.Variables["domainInfo"]).SelectToken("data.tenantId").ToString())</value>
                        </set-header>
                    </when>
                    <when condition="@(((IResponse)context.Variables["domainInfo"]).StatusCode != 200)">
                        <return-response response-variable-name="existing response variable">
                            <set-status code="504" reason="TenantId not found for domain" />
                            <set-header name="WWW-Authenticate" exists-action="override">
                                <value>Bearer error="invalid_token"</value>
                            </set-header>
                        </return-response>
                    </when>
                </choose>
            </when>
        </choose>
        <!-- Validate JWT by sending it to ValidateJwtService-->
        <send-request mode="new" response-variable-name="internalJWT" timeout="20" ignore-error="true">
            <set-url>https://funapp-dev-igloonovus-app-validate-jwt-service.azurewebsites.net/api/validation?code=FumaJ8bu6JO8uJ9kqV809Y6BGdBH1RPiTBIfJ2nY9NLoAzFuSgWoQA==</set-url>
            <set-method>GET</set-method>
            <set-header name="WorkplaceId" exists-action="override">
                <value>@(context.Request.Headers.GetValueOrDefault("WorkplaceId",""))</value>
            </set-header>
            <set-header name="X-Auth-Token" exists-action="override">
                <value>@(context.Request.Headers.GetValueOrDefault("X-Auth-Token", context.Request.Url.Query.GetValueOrDefault("X-Auth-Token", "No Token Found")))</value>
            </set-header>
        </send-request>
        <choose>
            <when condition="@(((IResponse)context.Variables["internalJWT"]).StatusCode == 200)">
                <set-variable name="authToken" value="@(((IResponse)context.Variables["internalJWT"]).Body.As<string>())" />
            </when>
            <when condition="@(((IResponse)context.Variables["internalJWT"]).StatusCode != 200)">
                <return-response response-variable-name="existing response variable">
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Bearer error="invalid_token"</value>
                    </set-header>
                </return-response>
            </when>
        </choose>
        <!-- Extract  TenantId from TenantId header parameter -->
        <set-variable name="tenantId" value="@(context.Request.Headers.GetValueOrDefault("TenantId"))" />
        <set-variable name="serviceKey" value="@(context.Request.Headers.GetValueOrDefault("ServiceKey"))" />
        <set-variable name="cacheKey" value="@(context.Variables["tenantId"] + "_" + context.Variables["serviceKey"])" />
        <!--Look for tenantconfig for this tenant in the cache -->
        <cache-lookup-value key="@((string)context.Variables["cacheKey"])" variable-name="tenantconfig" />
        <!-- If API Management doesnâ€™t find it in the cache, make a request for it and store it -->
        <choose>
            <when condition="@(!context.Variables.ContainsKey("tenantconfig"))">
                <!-- Make HTTP request to get tenant profile -->
                <send-request mode="new" response-variable-name="tenantconfigresponse" timeout="20" ignore-error="false">
                    <set-url>https://funapp-dev-igloonovus-app-tenant-config-service.azurewebsites.net/api/tenantconfigs?code=ofk1rUZGPle6xSR_3fTvimekZdYP9DJRF1flS0QMR07hAzFuAJpkhg==</set-url>
                    <set-method>GET</set-method>
                    <set-header name="X-Auth-Token" exists-action="override">
                        <value>@((string)context.Variables["authToken"])</value>
                    </set-header>
                    <set-header name="TenantId" exists-action="override">
                        <value>@((string)context.Variables["tenantId"])</value>
                    </set-header>
                    <set-header name="ServiceKey" exists-action="override">
                        <value>@((string)context.Variables["serviceKey"])</value>
                    </set-header>
                </send-request>
                <choose>
                    <when condition="@(((IResponse)context.Variables["tenantconfigresponse"]).StatusCode == 200)">
                        <!-- Store response body in context variable -->
                        <set-variable name="tenantconfig" value="@(((IResponse)context.Variables["tenantconfigresponse"]).Body.As<string>())" />
                        <!-- Store result in cache -->
                        <cache-store-value key="@((string)context.Variables["cacheKey"])" value="@((string)context.Variables["tenantconfig"])" duration="300" />
                    </when>
                    <when condition="@(((IResponse)context.Variables["internalJWT"]).StatusCode != 200)">
                        <return-response response-variable-name="existing response variable">
                            <set-status code="401" reason="Unauthorized" />
                            <set-header name="WWW-Authenticate" exists-action="override">
                                <value>Bearer error="invalid_token"</value>
                            </set-header>
                        </return-response>
                    </when>
                </choose>
            </when>
        </choose>
        <set-header name="X-Auth-Token" exists-action="override">
            <value>@((string)context.Variables["authToken"])</value>
        </set-header>
        <set-header name="TenantId" exists-action="override">
            <value>@((string)context.Variables["tenantId"])</value>
        </set-header>
        <set-header name="Endpoints" exists-action="override">
            <value>@((string)context.Variables["tenantconfig"])</value>
        </set-header>
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound />
    <on-error />
</policies>
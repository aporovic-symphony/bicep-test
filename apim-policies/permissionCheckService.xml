<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <set-header name="ServiceKey" exists-action="override">
            <value>PermissionCheckService</value>
        </set-header>
        <cors>
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PATCH</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        <set-header name="TenantId" exists-action="skip">
            <value>74e63db9-f42a-420c-850e-0f932be4cb76</value>
        </set-header>
        <!-- Extract Token from Authorization header parameter -->
        <set-variable name="authToken" value="@(context.Request.Headers.GetValueOrDefault("X-Auth-Token"))" />
        <!-- Extract  TenantId from TenantId header parameter -->
        <set-variable name="tenantId" value="@(context.Request.Headers.GetValueOrDefault("TenantId"))" />
        <set-variable name="serviceKey" value="@(context.Request.Headers.GetValueOrDefault("ServiceKey"))" />
        <set-variable name="cacheKey" value="@(context.Variables["tenantId"] + "_" + context.Variables["serviceKey"])" />
        <!--Look for tenantconfig for this tenant in the cache -->
        <cache-lookup-value key="@((string)context.Variables["cacheKey"])" variable-name="tenantconfig" />
        <!-- If API Management doesnâ€™t find it in the cache, make a request for it and store it -->
        <choose>
            <when condition="@(!context.Variables.ContainsKey("tenantconfig"))">
                <!-- Make HTTP request to get tenant profile -->
                <send-request mode="new" response-variable-name="tenantconfigresponse" timeout="20" ignore-error="false">
                    <set-url>https://funapp-dev-igloonovus-app-tenant-config-service.azurewebsites.net/api/tenantconfigs?code=ofk1rUZGPle6xSR_3fTvimekZdYP9DJRF1flS0QMR07hAzFuAJpkhg==</set-url>
                    <set-method>GET</set-method>
                    <set-header name="X-Auth-Token" exists-action="override">
                        <value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MjI2ZTFkZC0xN2I1LTRmMTEtYjA3Ny1jYzQ5NTY2NGFhODEiLCJ3b3JrcGxhY2VJZCI6IjI0Yjk3MmQwLWU2NWYtNDVlYS1hMjUxLWEwMzE4NGZmYTk0ZCIsInVzZXJOYW1lIjoiYm9iYnkiLCJmdWxsTmFtZSI6IkJvYmJ5IEpvc2UiLCJncm91cElkcyI6WyJhZDE2ZjViYy02Nzk5LTQ2ZTYtOTZiZi03N2I3MGNjNTE0ZjAiXSwibmJmIjoxNjU3ODA3MDY2LCJleHAiOjE4MTU0ODcwNjYsImlhdCI6MTY1NzgwNzA2NiwiaXNzIjoiQVBJTSJ9.bIRuRPV7VWZfIAMCbOfsrYDQKjSyd-QfFDxDT6G0Gsw</value>
                    </set-header>
                    <set-header name="TenantId" exists-action="override">
                        <value>@((string)context.Variables["tenantId"])</value>
                    </set-header>
                    <set-header name="ServiceKey" exists-action="override">
                        <value>@((string)context.Variables["serviceKey"])</value>
                    </set-header>
                </send-request>
                <!-- Store response body in context variable -->
                <set-variable name="tenantconfig" value="@(((IResponse)context.Variables["tenantconfigresponse"]).Body.As<string>())" />
                <!-- Store result in cache -->
                <cache-store-value key="@((string)context.Variables["cacheKey"])" value="@((string)context.Variables["tenantconfig"])" duration="300" />
            </when>
        </choose>
        <set-header name="X-Auth-Token" exists-action="override">
            <value>@((string)context.Variables["authToken"])</value>
        </set-header>
        <set-header name="TenantId" exists-action="override">
            <value>@((string)context.Variables["tenantId"])</value>
        </set-header>
        <set-header name="Endpoints" exists-action="override">
            <value>@((string)context.Variables["tenantconfig"])</value>
        </set-header>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>